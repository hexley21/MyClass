openapi: 3.0.3
info:
  title: MyClass
  description: MyClass
  version: 1.0.11
tags:
  - name: user
  - name: subject
  - name: group
  - name: student
paths:
  /users:
    get:
      tags:
        - user
      summary: Lists paginated users
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/per_page'
        - name: status
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessUserArr'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - user
      summary: Creates user
      parameters:
        - $ref: '#/components/parameters/AccessKey-NonRequired'
      requestBody:
        description: Update an existent user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-Args'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User-Args'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      tags:
        - user
      summary: deletes user by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      responses:
        '204':
          description: No content, deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}:
    get:
      tags:
        - user
      summary: Finds user by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - user
      summary: deletes user by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      responses:
        '204':
          description: No content, deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - user
      summary: Updates users's data
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Update an existent user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-Args'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User-Args'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /subjects:
    get:
      tags:
        - subject
      summary: Lists paginated subjects
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/SuccessSubjectArr'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - subject
      summary: Creates subject
      parameters:
        - $ref: '#/components/parameters/AccessKey'
      requestBody:
        description: Create new subject
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject-Args'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subject-Args'
      responses:
        '200':
          $ref: '#/components/responses/SuccessSubject'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /subjects/{id}:
    get:
      tags:
        - subject
      summary: Finds subject by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessSubject'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - subject
      summary: deletes subject by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      responses:
        '204':
          description: No content, deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - subject
      summary: Updates subject's data
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Update an existent subject
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject-Args'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subject-Args'
      responses:
        '200':
          $ref: '#/components/responses/SuccessSubject'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /subjects/{id}/groups:
    get:
      tags:
        - group
      summary: Lists paginated groups
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGroupArr'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - group
      summary: Creates new group for specified subject
      parameters:
        - $ref: '#/components/parameters/AccessKey'
      requestBody:
        description: Create new Group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group-Args'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group-Args'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /subjects/{subject_id}/groups/{group_id}:
    get:
      tags:
        - group
      summary: Finds group of specified subject by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/subject_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - group
      summary: Deletes group of specified subject by id
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/subject_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '204':
          description: No content, deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - group
      summary: Updates subject's group's data
      parameters:
        - $ref: '#/components/parameters/AccessKey'
        - $ref: '#/components/parameters/subject_id'
        - $ref: '#/components/parameters/group_id'
      requestBody:
        description: Update an existent group of specified subject
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group-Patch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group-Patch'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        email:
          type: string
          nullable: false
          example: john@doe.com
          maxLength: 255
        phone:
          type: string
          format: phone
          nullable: true
          example: 995555123456
        firstname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: John
        lastname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: Doe
        hash:
          type: string
          nullable: false
          maxLength: 128
        role:
          type: string
          description: Role of the user
          enum: 
            - ADMIN
            - OWNER
            - TEACHER
            - STUDENT
        userStatus:
          type: boolean
          nullable: false
          default: false
          example: true
    User-NoHash:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        email:
          type: string
          nullable: false
          example: john@doe.com
          maxLength: 255
        phone:
          type: string
          format: phone
          nullable: true
          example: 995555123456
        firstname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: John
        lastname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: Doe
        role:
          type: string
          description: Role of the user
          enum: 
            - ADMIN
            - OWNER
            - TEACHER
            - STUDENT
        userStatus:
          type: boolean
          nullable: false
          default: false
          example: true
    User-Args:
      type: object
      properties:
        email:
          type: string
          nullable: false
          example: john@doe.com
          maxLength: 255
        phone:
          type: string
          format: phone
          nullable: true
          example: 995555123456
        firstname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: John
        lastname:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: Doe
        password:
          type: string
          nullable: false
          maxLength: 64
        role:
          type: string
          description: Role of the user
          enum: 
            - ADMIN
            - OWNER
            - TEACHER
            - STUDENT
        userStatus:
          type: boolean
          nullable: false
          default: false
          example: true
    Owner:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        owner_name:
          type: string
          nullable: false
          maxLength: 64
          minLength: 2
          example: The Best Owner 77!
        industry:
          type: string
          nullable: false
          description: The industry where the owner specializes in
          enum:
            - Else
            - Finances
            - Medicine
            - Education
            - Technologies
            - Agriculture
            - Entertainment
            - Construction
            - Legal
            - Marketing
            - Insurance
            - Automotive
        country:
          type: string
          nullable: false
          example: Georgia
      xml:
        name: owner
    Subject:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        owner_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        code:
          type: string
          nullable: false
          maxLength: 32
          example: IT-SERV31
        name:
          type: string
          nullable: false
          maxLength: 255
          example: IT Services Managment
        description:
          type: string
          format: text
          nullable: false
          example: How to manage IT services in real world
        syallabus:
          type: string
          format: url
          nullable: false
          example: https://github.com/hexley21
        min_grade:
          type: number
          format: numberic(5, 2)
          nullable: false
          example: 12.34
        price:
          type: number
          format: numeric(10, 4)
          nullable: false
          example: 123456.1234
        currency:
          type: string
          nullable: false
          enum:
            - USD
            - EUR
            - GEL
    Subject-Args:
      type: object
      properties:
        owner_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        code:
          type: string
          nullable: false
          maxLength: 32
          example: IT-SERV31
        name:
          type: string
          nullable: false
          maxLength: 255
          example: IT Services Managment
        description:
          type: string
          format: text
          nullable: false
          example: How to manage IT services in real world
        syallabus:
          type: string
          format: url
          nullable: false
          example: https://github.com/hexley21
        min_grade:
          type: number
          format: numberic(5, 2)
          nullable: false
          example: 12.34
        price:
          type: number
          format: numeric(10, 4)
          nullable: false
          example: 123456.1234
        currency:
          type: string
          nullable: false
          enum:
            - USD
            - EUR
            - GEL
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        subject_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        teacher_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        capacity:
          type: number
          nullable: false
          example: 25
      xml:
        name: group
    Group-Args:
      type: object
      properties:
        subject_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        teacher_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        capacity:
          type: number
          nullable: false
          example: 25
      xml:
        name: group
    Group-Patch:
      type: object
      properties:
        teacher_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        capacity:
          type: number
          nullable: false
          example: 25
      xml:
        name: group
    Lesson:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        subject_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        name:
          type: string
          nullable: false
          maxLength: 255
          example: Deploying to AWS
        date:
          type: string
          format: date-time
          nullable: false
          example: 27/05/2024
        description:
          type: string
          format: text
          nullable: true
          example: This lesson includes the techniques of deploying your project to AWS
        attachments:
          type: string
          format: url
          nullable: true
          example: https://gtihub.com/hexley21
      xml:
        name: lesson
    Quiz:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          default: uuid_generate_v4()
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        subject_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        max_grade:
          type: number
          format: numeric(5, 2)
          nullable: false
        min_percentage:
          type: number
          format: integer
          example: 41
        date:
          type: string
          format: date-time
          nullable: false
          example: 27/05/2024
        deadline:
          type: string
          format: date-time
          nullable: false
          example: 27/05/2024
      xml:
        name: quiz
    Attendance:
      type: object
      properties:
        lesson_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        student_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
      xml:
        name: attendance
    Grade:
      type: object
      properties: 
        quiz_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        subject_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        student_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        teacher_id:
          type: string
          format: uuid
          nullable: false
          example: 73fa5b43-a458-4c88-8c86-ace89d02fe51
        grade:
          type: number
          format: numeric(5, 2)
          nullable: false
          example: 12.34
      xml:
        name: grade
    ApiResponse:
      type: object
      properties:
        data:
          type: object
    PageResponse:
      type: object
      properties:
        data:
          type: array
        has_more:
          type: boolean
    BasicError:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    SuccessEmpty:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    SuccessUser:
      description: Successful User operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User-NoHash'
    SuccessUserArr:
      description: Successful User operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PageResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User-NoHash'
    SuccessSubject:
      description: Successful Subject operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Subject'
    SuccessSubjectArr:
      description: Successful Subject operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PageResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subject'
    SuccessGroup:
      description: Successful Group operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
    SuccessGroupArr:
      description: Successful Subject operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PageResponse'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
  parameters:
    AccessKey:
      name: access_key
      in: header
      description: 'user Access Key'
      required: true
      schema:
        type: string
    AccessKey-NonRequired:
      name: access_key
      in: header
      description: 'user Access Key'
      required: false
      schema:
        type: string
    Page:
      name: page
      in: query
      required: true
      schema:
        type: number
        default: 1
    per_page:
      name: per_page
      in: query
      required: true
      schema:
        type: number
        default: 20
    UUID:
      name: id
      in: path
      description: ID of an object
      required: true
      schema:
        type: string
    subject_id:
      name: subject_id
      in: path
      description: ID of an object
      required: true
      schema:
        type: string
    group_id:
      name: group_id
      in: path
      description: ID of an object
      required: true
      schema:
        type: string